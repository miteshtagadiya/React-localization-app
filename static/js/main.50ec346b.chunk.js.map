{"version":3,"sources":["locale/index.js","App.js","serviceWorker.js","index.js"],"names":["en_US","fr_FR","hi_IN","useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","App","props","React","useState","anchorEl","setAnchorEl","handleClose","container","classes","useTheme","mobileOpen","setMobileOpen","data","setData","locale","setLocale","setLoader","setErr","useEffect","fetch","method","then","res","json","response","catch","error","handleDrawerToggle","className","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","id","defaultMessage","messages","translations","CssBaseline","AppBar","position","Toolbar","style","justifyContent","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","Button","aria-controls","aria-haspopup","event","currentTarget","keepMounted","open","Boolean","onClose","MenuItem","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","xsDown","fontWeight","length","locations","location","country","country_code","Date","last_updated","toLocaleDateString","latest","confirmed","deaths","recovered","paragraph","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.50ec346b.chunk.js","sourcesContent":["import en_US from \"./en-US.json\";\nimport fr_FR from \"./fr-FR.json\";\nimport hi_IN from \"./hi-IN.json\";\n\nexport default { en_US, fr_FR, hi_IN }","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FormattedMessage } from \"react-intl\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { IntlProvider } from \"react-intl\";\nimport translations from \"./locale\";\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport \"./App.css\";\n// import GeoMap from \"./GroMap/GeoMap\";\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\"\n  },\n  drawer: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    [theme.breakpoints.up(\"sm\")]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth\n    }\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"none\"\n    }\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3)\n  }\n}));\n\nfunction App(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const [locale, setLocale] = React.useState(\"en_US\");\n  const [loader, setLoader] = React.useState(false);\n  const [err, setErr] = React.useState(false);\n\n  React.useEffect(() => {\n    setLoader(true);\n    setErr(false);\n    fetch(`https://coronavirus-tracker-api.herokuapp.com/v2/locations`, {\n      method: \"GET\"\n    })\n      .then(res => res.json())\n      .then(response => {\n        setData(response);\n        setLoader(false);\n        setErr(false);\n      })\n      .catch(error => {\n        setData([]);\n        setLoader(false);\n        setErr(true);\n      });\n  }, []);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText\n              primary={<FormattedMessage id={text} defaultMessage={text} />}\n            />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n\n      <IntlProvider locale={\"en\"} messages={translations[locale]}>\n        <List>\n          {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n              </ListItemIcon>\n              <ListItemText\n                primary={<FormattedMessage id={text} defaultMessage={text} />}\n              />\n            </ListItem>\n          ))}\n        </List>\n      </IntlProvider>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Responsive drawer\n          </Typography>\n          <div>\n            <Button\n              style={{ color: \"white\" }}\n              aria-controls=\"simple-menu\"\n              aria-haspopup=\"true\"\n              onClick={handleClick}\n            >\n              Open Menu\n            </Button>\n            <Menu\n              id=\"simple-menu\"\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={handleClose}\n            >\n              <MenuItem\n                onClick={() => {\n                  setLocale(\"en-US\");\n                  handleClose();\n                }}\n              >\n                English\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  setLocale(\"hi_IN\");\n                  handleClose();\n                }}\n              >\n                Hindi\n              </MenuItem>\n              <MenuItem\n                onClick={() => {\n                  setLocale(\"fr_FR\");\n                  handleClose();\n                }}\n              >\n                French\n              </MenuItem>\n            </Menu>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === \"rtl\" ? \"right\" : \"left\"}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            ModalProps={{\n              keepMounted: true // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        {/* <GeoMap\n          selector={\"Country\"}\n          rows={locations}\n          columns={Columns}\n          height={\"210px\"}\n        /> */}\n\n        <table>\n          <thead style={{ fontWeight: \"bold\" }}>\n            <tr>\n              <th>Country</th>\n              <th>Country Code</th>\n              <th>Last Updated</th>\n              <th>Confirmed</th>\n              <th>Deaths</th>\n              <th>Recovered</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.length !== 0 ? (\n              data.locations.map((location, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{location.country}</td>\n                    <td>{location.country_code}</td>\n                    <td>\n                      {new Date(location.last_updated).toLocaleDateString()}\n                    </td>\n                    <td>{location.latest.confirmed}</td>\n\n                    <td>{location.latest.deaths}</td>\n\n                    <td>{location.latest.recovered}</td>\n                  </tr>\n                );\n              })\n            ) : (\n              <tr />\n            )}\n          </tbody>\n        </table>\n\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Rhoncus\n          dolor purus non enim praesent elementum facilisis leo vel. Risus at\n          ultrices mi tempus imperdiet. Semper risus in hendrerit gravida rutrum\n          quisque non tellus. Convallis convallis tellus id interdum velit\n          laoreet id donec ultrices. Odio morbi quis commodo odio aenean sed\n          adipiscing. Amet nisl suscipit adipiscing bibendum est ultricies\n          integer quis. Cursus euismod quis viverra nibh cras. Metus vulputate\n          eu scelerisque felis imperdiet proin fermentum leo. Mauris commodo\n          quis imperdiet massa tincidunt. Cras tincidunt lobortis feugiat\n          vivamus at augue. At augue eget arcu dictum varius duis at consectetur\n          lorem. Velit sed ullamcorper morbi tincidunt. Lorem donec massa sapien\n          faucibus et molestie ac.\n        </Typography>\n        <Typography paragraph>\n          Consequat mauris nunc congue nisi vitae suscipit. Fringilla est\n          ullamcorper eget nulla facilisi etiam dignissim diam. Pulvinar\n          elementum integer enim neque volutpat ac tincidunt. Ornare suspendisse\n          sed nisi lacus sed viverra tellus. Purus sit amet volutpat consequat\n          mauris. Elementum eu facilisis sed odio morbi. Euismod lacinia at quis\n          risus sed vulputate odio. Morbi tincidunt ornare massa eget egestas\n          purus viverra accumsan in. In hendrerit gravida rutrum quisque non\n          tellus orci ac. Pellentesque nec nam aliquam sem et tortor. Habitant\n          morbi tristique senectus et. Adipiscing elit duis tristique\n          sollicitudin nibh sit. Ornare aenean euismod elementum nisi quis\n          eleifend. Commodo viverra maecenas accumsan lacus vel facilisis. Nulla\n          posuere sollicitudin aliquam ultrices sagittis orci a.\n        </Typography>\n      </main>\n    </div>\n  );\n}\n\nApp.propTypes = {\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  container: PropTypes.any\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { IntlProvider } from \"react-intl\";\nimport translations from \"./locale\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst locale = \"en_US\"; //navigator.language || \"en\"\nconst messages = translations[locale];\n\nReactDOM.render(\n  <React.StrictMode>\n    <IntlProvider locale={\"en\"} messages={messages}>\n      <App />\n    </IntlProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}